# White on blue for inactive tabs, white on red for the active tab, and white on green for a tab with activity
set -g status-bg blue
set -g status-fg brightwhite
set-window-option -g window-status-current-style fg=brightwhite,bg=red
#set-window-option -g window-status-current-bg red
set-window-option -g window-status-activity-style fg=green,bg=brightwhite 
#set-window-option -g window-status-activity-fg green 
#set-window-option -g window-status-activity-bg brightwhite 

# Inactive tabs are Number: Name Flags. The active tab is surrounded by brackets. 
# Flags (from the man page):
#           *         Denotes the current window.
#           -         Marks the last window (previously selected).
#           #         Window is monitored and activity has been detected.
#           !         A bell has occurred in the window.
#           +         Window is monitored for content and it has appeared.
#           ~         The window has been silent for the monitor-silence interval.
set-window-option -g window-status-format '#I:#W#F'
set-window-option -g window-status-current-format '[#I:#W#F]'

# Nothing on the left or the right
set -g status-left ''
set -g status-right ''

# Show a status bar update when there's activity in a monitored window
set -g visual-activity on

# Use the mouse to select panes, windows, and enter copy mode. To select in PuTTY (Windows copy-to-clipboard), hold shift while clicking
#set -g mode-mouse on
#set -g mouse-select-pane on
#set -g mouse-select-window on
#set -g mouse-resize-pane on
#set -g mouse-utf off
set-option -g -q mouse on

# The first window is 1, not 0. Less CompSciesque, but more useful from the keyboard
set -g base-index 1

# Force the terminal emulation to use screen-256color
set -g default-terminal "screen-256color"

# Watch for activity in all windows, by default
set-window-option -g monitor-activity on

# Set the title of a window to the currently running program. Can be overwritten at any time
set-window-option -g automatic-rename on

# Only resize a window if another client is looking at it
set-window-option -g aggressive-resize on

# I don't like the default Ctrl-B
unbind C-b
# But I do like Ctrl-a
set -g prefix C-a
# Ctrl-a, a to send a Ctrl-a to the running application
bind a send-prefix

# Ctrl-a, Ctrl-a to toggle between the last two windows
bind C-a last-window

# In the scrollback buffer, use VI style keys.
setw -g mode-keys vi

# Window browsing
# Next window with Ctrl-n, <space>, n, or just F12
unbind C-N
bind C-N next-window
unbind " "
bind " " next-window
bind C-" " next-window
unbind n
bind n next-window
bind -n F12 next-window
# Previous window with Ctrl-p, p, or just F11
unbind C-P
bind C-P previous-window
unbind p
bind p previous-window
bind -n F11 previous-window

# Keep 25000 lines of scrollback
set -g history-limit 25000
# Mimic screen's [H]istory, where all stdout is saved to a file (named ~/tmux-<window_name>-<pane_number>.log
bind H pipe-pane -o 'cat >> $HOME/tmux-#W-#P.log' \; display-message 'Toggled Logging'
 
# Ctrl-A [ to enter copy mode
# Ctrl-A ] to paste (like screen)
# v to begin selecting (like VI)
# y to copy the selection (also like VI)
unbind [
bind [ copy-mode
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection 
unbind ]
bind ] paste-buffer #-s 015

# Rename windows with A (or the default ,)
unbind A
bind A command-prompt "rename-window %%"

# Redisplay the window. Sometimes necessary.
unbind C-L
bind C-L refresh-client
unbind l
bind l refresh-client

# Vertifical split (draw a |)
unbind |
bind | split-window -h
# Horizontal split (draw a ----)
unbind -
bind - split-window -v

# Tab to toggle panes. Shift-Tab to go in reverse order
unbind Tab
bind Tab select-pane -t:.+
unbind BTab
bind BTab select-pane -t:.-

# Capture history to a file
bind-key P command-prompt -p 'save history to filename:' -I '~/tmux.history' 'capture-pane -S - ; save-buffer %1 ; delete-buffer'

# Reload config
bind r source-file ~/.tmux.conf

# Show when the prefix key is pressed
set -g status-left "#[bg=red]#{s/root//:client_key_table}"

# Pass some private environment variables to tmux windows
set -g update-environment "SOLARIZED"
set -g -a update-environment " DISPLAY"
set -g default-command "( [ `which reattach-to-user-namespace` ] && reattach-to-user-namespace -l /usr/local/bin/bash ) || ( [ `which /usr/local/bin/bash` ] && /usr/local/bin/bash -l ) || /bin/bash -l"
